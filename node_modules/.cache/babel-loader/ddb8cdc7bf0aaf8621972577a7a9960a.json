{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_userView = _resolveComponent(\"userView\");\n\n  const _component_Polyline = _resolveComponent(\"Polyline\");\n\n  const _component_Marker = _resolveComponent(\"Marker\");\n\n  const _component_GoogleMap = _resolveComponent(\"GoogleMap\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_userView), _createCommentVNode(\" <button @click=\\\"getLocation()\\\">Track Location</button> \"), _ctx.formState.loader ? (_openBlock(), _createBlock(_component_GoogleMap, {\n    key: 0,\n    \"api-key\": \"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    center: _ctx.formState.center,\n    zoom: 25\n  }, {\n    default: _withCtx(() => [_createVNode(_component_Polyline, {\n      options: _ctx.line.flightPath\n    }, null, 8\n    /* PROPS */\n    , [\"options\"]), _createVNode(_component_Marker, {\n      options: {\n        position: _ctx.formState.center\n      }\n    }, null, 8\n    /* PROPS */\n    , [\"options\"])]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"center\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;;;;;;uBAGEA,oBAaM,KAbN,EAaM,IAbN,EAaM,CAZJC,aAAYC,mBAAZ,CAYI,EAXJC,iFAWI,EATIC,eAAUC,wBADlBC,aASYC,oBATZ,EASY;UAAA;IAPV,WAAQ,yCAOE;IANVC,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAMU;IALTC,MAAM,EAAEL,eAAUK,MAKT;IAJTC,IAAI,EAAE;EAIG,CATZ;sBAOE,MAAuC,CAAvCT,aAAuCU,mBAAvC,EAAuC;MAA5BC,OAAO,EAAER,UAAKS;IAAc,CAAvC;;IAAA,cAAuC,EACvCZ,aAAoDa,iBAApD,EAAoD;MAA3CF,OAAO;QAAAG,UAAcX,eAAUK;MAAxB;IAAoC,CAApD;;IAAA,cADuC;;;;GAPzC;;EAAA,kDAUI,CAbN","names":["_createElementBlock","_createVNode","_component_userView","_createCommentVNode","_ctx","loader","_createBlock","_component_GoogleMap","style","center","zoom","_component_Polyline","options","flightPath","_component_Marker","position"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n  <div>\n    <userView />\n    <!-- <button @click=\"getLocation()\">Track Location</button> -->\n    <GoogleMap\n      v-if=\"formState.loader\"\n      api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"formState.center\"\n      :zoom=\"25\"\n    >\n      <Polyline :options=\"line.flightPath\" />\n      <Marker :options=\"{ position: formState.center }\" />\n    </GoogleMap>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\n\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\";\n// import Parse from \"parse\";\n\nexport default defineComponent({\n  components: { GoogleMap, Marker, Polyline, userView },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center: { lat: 40.689247, lng: -74.044502 },\n      loader: false,\n      data: []\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(() => {\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 5000); //number of milliseconds\n      getLocation();\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      formState.loader = false;\n      if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n\n          // console.log(formState.center.lat)\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          \n          const currentUser = Parse.User.current();\n          console.log(\"curremt user\",currentUser.get(\"username\"),currentUser.id)\n          await User.getPointer(currentUser.id).then(obj => {\n            currentUser.set({\n              \"location\":formState.data\n              \n            })\n            currentUser.save().then(()=>{\n              console.log(\"saving............................\")\n            })\n            console.log(obj);\n          });\n         \n          formState.loader = true;\n        });\n      }\n    };\n    // setInterval(updateLocation, 5000);\n\n    const trackLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      trackLocation,\n      getLocation,\n      line\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}