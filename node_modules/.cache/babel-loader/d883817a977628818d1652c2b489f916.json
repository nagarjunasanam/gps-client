{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Polyline = _resolveComponent(\"Polyline\");\n\n  const _component_Marker = _resolveComponent(\"Marker\");\n\n  const _component_GoogleMap = _resolveComponent(\"GoogleMap\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.formState.data), 1\n  /* TEXT */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.getLocation())\n  }, \"Track Location\"), _ctx.formState.loader ? (_openBlock(), _createBlock(_component_GoogleMap, {\n    key: 0,\n    \"api-key\": \"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    center: _ctx.formState.center,\n    zoom: 25\n  }, {\n    default: _withCtx(() => [_createVNode(_component_Polyline, {\n      options: _ctx.line.flightPath\n    }, null, 8\n    /* PROPS */\n    , [\"options\"]), _createVNode(_component_Marker, {\n      options: {\n        position: _ctx.formState.center\n      }\n    }, null, 8\n    /* PROPS */\n    , [\"options\"])]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"center\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;;;;uBAGAA,oBAOM,KAPN,EAOM,IAPN,EAOM,CANJC,oBAAyB,GAAzB,EAAyB,IAAzB,EAAyBC,iBAApBC,eAAUC,IAAU,CAAzB,EAAmB;EAAA;EAAnB,CAMI,EALJH,oBAAsD,QAAtD,EAAsD;IAA7CI,OAAK,sCAAEF,kBAAF;EAAwC,CAAtD,EAA+B,gBAA/B,CAKI,EAJaA,eAAUG,wBAA3BC,aAGYC,oBAHZ,EAGY;UAAA;IAHuB,WAAQ,yCAG/B;IAHyEC,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAGzE;IAH6GC,MAAM,EAAEP,eAAUO,MAG/H;IAHwIC,IAAI,EAAE;EAG9I,CAHZ;sBACE,MAAuC,CAAvCC,aAAuCC,mBAAvC,EAAuC;MAA5BC,OAAO,EAAEX,UAAKY;IAAc,CAAvC;;IAAA,cAAuC,EACvCH,aAAoDI,iBAApD,EAAoD;MAA3CF,OAAO;QAAAG,UAAcd,eAAUO;MAAxB;IAAoC,CAApD;;IAAA,cADuC;;;;GADzC;;EAAA,kDAII,CAPN","names":["_createElementBlock","_createElementVNode","_toDisplayString","_ctx","data","onClick","loader","_createBlock","_component_GoogleMap","style","center","zoom","_createVNode","_component_Polyline","options","flightPath","_component_Marker","position"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n<div>\n  <p>{{formState.data}}</p>\n  <button @click=\"getLocation()\">Track Location</button>\n  <GoogleMap v-if=\"formState.loader\" api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\" style=\"width: 100%; height: 500px\" :center=\"formState.center\" :zoom=\"25\">\n    <Polyline :options=\"line.flightPath\" />\n    <Marker :options=\"{ position: formState.center }\" />\n  </GoogleMap>\n</div>\n</template>\n\n<script>\nimport { defineComponent,reactive ,onMounted} from \"vue\";\nimport { GoogleMap, Marker ,Polyline } from \"vue3-google-map\";\n\nimport Parse from 'parse'\nimport User from '../server/user'\n\nexport default defineComponent({\n  components: { GoogleMap, Marker,Polyline  },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center:{lat: 40.689247, lng: -74.044502},\n      loader:false,\n      data:[],\n    \n\n    });\n    const line = reactive({\n      flightPath :{\n        path: formState.data,\n      geodesic: true,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1.0,\n      strokeWeight: 2,\n      }\n    })\n    onMounted(()=>{\n      // { \"lat\": 17.394396, \"lng\": 78.3576542 }\n      // { \"lat\": 17.3943958, \"lng\": 78.357626 }\n      // if(navigator.geolocation){\n      //   console.log(\"h\")\n      //   navigator.geolocation.getCurrentPosition((position)=>{\n      //     console.log(position.coords.latitude)\n      //     console.log(position.coords.longitude)\n      //     // console.log(formState.center.lat)\n      //     formState.center.lat=position.coords.latitude\n      //     formState.center.lng=position.coords.longitude\n      //     formState.loader=true\n\n      //   })\n      // }\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(()=>{\n      //  console.log(position.coords)\n       \n\n        })\n        getLocation()\n  }, 5000) //number of milliseconds\n      getLocation()\n    })\n\n    const updateLocation = async()=>{\n      if(navigator.geolocation){\n        \n        await navigator.geolocation.getCurrentPosition((position)=>{\n          formState.data.push({lat:position.coords.latitude,lng:position.coords.longitude})\n          console.log(position.coords.latitude)\n          console.log(position.coords.longitude)\n          \n          formState.center.lat=position.coords.latitude\n          formState.center.lng=position.coords.longitude\n\n        })\n      }\n\n    }\n\n    const getLocation = async ()=>{\n      formState.loader=false\n      if(navigator.geolocation){\n        // console.log(\"h\")\n       await  navigator.geolocation.getCurrentPosition(async (position)=>{\n          console.log(position.coords.latitude)\n          console.log(position.coords.longitude)\n          formState.data.push({lat:position.coords.latitude,lng:position.coords.longitude})\n            \n          // console.log(formState.center.lat)\n          formState.center.lat=position.coords.latitude\n          formState.center.lng=position.coords.longitude\n          const Location = Parse.Object.extend(\"Location\");\n      const addExperience = new Location();\n      await addExperience.set({\n        // location:formState.data\n\n      })\n      await User.getPointer('Oy4UKfTWXO').then((obj)=>{\n        console.log(obj)\n      })\n      await addExperience.save().then(()=>{\n        console.log(\"data saved\")\n      })\n          formState.loader=true\n\n        })\n      }\n\n    }\n    // setInterval(updateLocation, 5000);\n\n    const trackLocation = ()=>{\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    }\n   \n   \n\n    return { center ,formState,updateLocation,trackLocation,getLocation,line};\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}