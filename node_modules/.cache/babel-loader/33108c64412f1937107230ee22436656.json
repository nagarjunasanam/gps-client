{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\nimport Parse from 'parse';\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    Polyline\n  },\n\n  setup() {\n    const center = {\n      lat: 40.689247,\n      lng: -74.044502\n    };\n    const formState = reactive({\n      image: \"\",\n      center: {\n        lat: 40.689247,\n        lng: -74.044502\n      },\n      loader: false,\n      data: []\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(() => {\n      // { \"lat\": 17.394396, \"lng\": 78.3576542 }\n      // { \"lat\": 17.3943958, \"lng\": 78.357626 }\n      // if(navigator.geolocation){\n      //   console.log(\"h\")\n      //   navigator.geolocation.getCurrentPosition((position)=>{\n      //     console.log(position.coords.latitude)\n      //     console.log(position.coords.longitude)\n      //     // console.log(formState.center.lat)\n      //     formState.center.lat=position.coords.latitude\n      //     formState.center.lng=position.coords.longitude\n      //     formState.loader=true\n      //   })\n      // }\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {//  console.log(position.coords)\n        });\n        getLocation();\n      }, 5000); //number of milliseconds\n\n      getLocation();\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      formState.loader = false;\n\n      if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }); // console.log(formState.center.lat)\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          const Location = Parse.Object.extend(\"Location\");\n          const addExperience = new Location();\n          await addExperience.set({\n            location: formState.data\n          });\n          await addExperience.save().then(() => {\n            console.log(\"data saved\");\n          });\n          formState.loader = true;\n        });\n      }\n    }; // setInterval(updateLocation, 5000);\n\n\n    const trackLocation = () => {// console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      trackLocation,\n      getLocation,\n      line\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","reactive","onMounted","GoogleMap","Marker","Polyline","Parse","components","setup","center","lat","lng","formState","image","loader","data","line","flightPath","path","geodesic","strokeColor","strokeOpacity","strokeWeight","window","setInterval","navigator","geolocation","getCurrentPosition","getLocation","updateLocation","position","push","coords","latitude","longitude","console","log","Location","Object","extend","addExperience","set","location","save","then","trackLocation"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n<div>\n  <p>{{formState.data}}</p>\n  <button @click=\"getLocation()\">Track Location</button>\n  <GoogleMap v-if=\"formState.loader\" api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\" style=\"width: 100%; height: 500px\" :center=\"formState.center\" :zoom=\"25\">\n    <Polyline :options=\"line.flightPath\" />\n    <Marker :options=\"{ position: formState.center }\" />\n  </GoogleMap>\n</div>\n</template>\n\n<script>\nimport { defineComponent,reactive ,onMounted} from \"vue\";\nimport { GoogleMap, Marker ,Polyline } from \"vue3-google-map\";\n\nimport Parse from 'parse'\n\nexport default defineComponent({\n  components: { GoogleMap, Marker,Polyline  },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center:{lat: 40.689247, lng: -74.044502},\n      loader:false,\n      data:[],\n    \n\n    });\n    const line = reactive({\n      flightPath :{\n        path: formState.data,\n      geodesic: true,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1.0,\n      strokeWeight: 2,\n      }\n    })\n    onMounted(()=>{\n      // { \"lat\": 17.394396, \"lng\": 78.3576542 }\n      // { \"lat\": 17.3943958, \"lng\": 78.357626 }\n      // if(navigator.geolocation){\n      //   console.log(\"h\")\n      //   navigator.geolocation.getCurrentPosition((position)=>{\n      //     console.log(position.coords.latitude)\n      //     console.log(position.coords.longitude)\n      //     // console.log(formState.center.lat)\n      //     formState.center.lat=position.coords.latitude\n      //     formState.center.lng=position.coords.longitude\n      //     formState.loader=true\n\n      //   })\n      // }\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(()=>{\n      //  console.log(position.coords)\n       \n\n        })\n        getLocation()\n  }, 5000) //number of milliseconds\n      getLocation()\n    })\n\n    const updateLocation = async()=>{\n      if(navigator.geolocation){\n        \n        await navigator.geolocation.getCurrentPosition((position)=>{\n          formState.data.push({lat:position.coords.latitude,lng:position.coords.longitude})\n          console.log(position.coords.latitude)\n          console.log(position.coords.longitude)\n          \n          formState.center.lat=position.coords.latitude\n          formState.center.lng=position.coords.longitude\n\n        })\n      }\n\n    }\n\n    const getLocation = async ()=>{\n      formState.loader=false\n      if(navigator.geolocation){\n        // console.log(\"h\")\n       await  navigator.geolocation.getCurrentPosition(async (position)=>{\n          console.log(position.coords.latitude)\n          console.log(position.coords.longitude)\n          formState.data.push({lat:position.coords.latitude,lng:position.coords.longitude})\n            \n          // console.log(formState.center.lat)\n          formState.center.lat=position.coords.latitude\n          formState.center.lng=position.coords.longitude\n          const Location = Parse.Object.extend(\"Location\");\n      const addExperience = new Location();\n      await addExperience.set({\n        location:formState.data\n\n      })\n      await addExperience.save().then(()=>{\n        console.log(\"data saved\")\n      })\n          formState.loader=true\n\n        })\n      }\n\n    }\n    // setInterval(updateLocation, 5000);\n\n    const trackLocation = ()=>{\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    }\n   \n   \n\n    return { center ,formState,updateLocation,trackLocation,getLocation,line};\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}