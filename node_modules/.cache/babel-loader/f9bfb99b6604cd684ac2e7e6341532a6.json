{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\"; // import Parse from \"parse\";\n\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    Polyline,\n    userView\n  },\n\n  setup() {\n    const center = {\n      lat: 40.689247,\n      lng: -74.044502\n    };\n    const formState = reactive({\n      image: \"\",\n      center: {\n        lat: 40.689247,\n        lng: -74.044502\n      },\n      loader: false,\n      data: []\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(() => {\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 5000); //number of milliseconds\n\n      getLocation();\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      formState.loader = false;\n\n      if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }); // console.log(formState.center.lat)\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          const Location = Parse.Object.extend(\"Location\");\n          const addExperience = new Location();\n          await addExperience.set({// location:formState.data\n          });\n          await User.getPointer(\"Oy4UKfTWXO\").then(obj => {\n            console.log(obj);\n          });\n          await addExperience.save().then(() => {\n            console.log(\"data saved\");\n          });\n          formState.loader = true;\n        });\n      }\n    }; // setInterval(updateLocation, 5000);\n\n\n    const trackLocation = () => {// console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      trackLocation,\n      getLocation,\n      line\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","reactive","onMounted","GoogleMap","Marker","Polyline","Parse","User","userView","components","setup","center","lat","lng","formState","image","loader","data","line","flightPath","path","geodesic","strokeColor","strokeOpacity","strokeWeight","window","setInterval","navigator","geolocation","getCurrentPosition","getLocation","updateLocation","position","push","coords","latitude","longitude","console","log","Location","Object","extend","addExperience","set","getPointer","then","obj","save","trackLocation"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n  <div>\n    <userView />\n    <!-- <button @click=\"getLocation()\">Track Location</button> -->\n    <GoogleMap\n      v-if=\"formState.loader\"\n      api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"formState.center\"\n      :zoom=\"25\"\n    >\n      <Polyline :options=\"line.flightPath\" />\n      <Marker :options=\"{ position: formState.center }\" />\n    </GoogleMap>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\n\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\";\n// import Parse from \"parse\";\n\nexport default defineComponent({\n  components: { GoogleMap, Marker, Polyline, userView },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center: { lat: 40.689247, lng: -74.044502 },\n      loader: false,\n      data: []\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(() => {\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 5000); //number of milliseconds\n      getLocation();\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      formState.loader = false;\n      if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n\n          // console.log(formState.center.lat)\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          const Location = Parse.Object.extend(\"Location\");\n          const addExperience = new Location();\n          await addExperience.set({\n            // location:formState.data\n          });\n          await User.getPointer(\"Oy4UKfTWXO\").then(obj => {\n            console.log(obj);\n          });\n          await addExperience.save().then(() => {\n            console.log(\"data saved\");\n          });\n          formState.loader = true;\n        });\n      }\n    };\n    // setInterval(updateLocation, 5000);\n\n    const trackLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      trackLocation,\n      getLocation,\n      line\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}