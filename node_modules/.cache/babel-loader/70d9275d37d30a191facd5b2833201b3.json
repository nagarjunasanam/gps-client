{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\"; // import Parse from \"parse\";\n\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    Polyline,\n    userView\n  },\n\n  setup() {\n    const center = {\n      lat: 40.689247,\n      lng: -74.044502\n    };\n    const formState = reactive({\n      image: \"\",\n      center: {\n        lat: 40.689247,\n        lng: -74.044502\n      },\n      loader: false,\n      data: [],\n      getData: [],\n      flag: false,\n      sharing: false,\n      start: true,\n      stop: false\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(async () => {\n      const currentUser = Parse.User.current(); // const currentUser = Parse.User.current();\n      // await User.getPointer(currentUser.id).then((obj)=>{\n      //   var ldata =  currentUser.get('userLocation')\n      // })\n\n      if (currentUser) {\n        var ldata = currentUser.get('userLocation');\n        console.log(\"ldata\", ldata);\n        formState.data = currentUser.get('userLocation');\n        console.log(formState.data[0]);\n      } // getLocation();\n      // window.setInterval(() => {\n      //   navigator.geolocation.getCurrentPosition(() => {});\n      //   getLocation();\n      // }, 9000); \n\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      const checkUseer = Parse.User.current();\n      formState.loader = false;\n\n      if (checkUseer) {\n        if (navigator.geolocation) {\n          // console.log(\"h\")\n          await navigator.geolocation.getCurrentPosition(async position => {\n            console.log(position.coords.latitude);\n            console.log(position.coords.longitude);\n            console.log(formState.data);\n            formState.data.push({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            });\n            formState.getData.push({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }); // console.log(formState.center.lat)\n\n            formState.center.lat = position.coords.latitude;\n            formState.center.lng = position.coords.longitude;\n            const currentUser = Parse.User.current();\n            console.log(\"curremt user\", currentUser.get(\"username\"), currentUser.id);\n            await User.getPointer(currentUser.id).then(obj => {\n              currentUser.set({\n                \"userLocation\": formState.data\n              });\n              currentUser.save().then(() => {\n                console.log(\"saving............................\");\n              });\n              console.log(obj);\n            });\n            formState.loader = true;\n          });\n        }\n      }\n    }; // setInterval(updateLocation, 5000);\n\n\n    const startLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n      var intervel = window.setInterval(() => {\n        formState.start = false;\n        formState.stop = true;\n\n        if (formState.flag) {\n          window.clearInterval(intervel);\n        } else {\n          getLocation();\n        } // navigator.geolocation.getCurrentPosition(() => {});\n\n      }, 5000); // clearInterval(startLocation());\n    };\n\n    const stopLocation = () => {\n      console.log(\"stop\"); // clearInterval(startLocation());\n\n      formState.flag = true;\n      formState.start = true;\n      formState.stop = false; // clearInterval(myInterval);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      startLocation,\n      getLocation,\n      line,\n      stopLocation\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","reactive","onMounted","GoogleMap","Marker","Polyline","Parse","User","userView","components","setup","center","lat","lng","formState","image","loader","data","getData","flag","sharing","start","stop","line","flightPath","path","geodesic","strokeColor","strokeOpacity","strokeWeight","currentUser","current","ldata","get","console","log","updateLocation","navigator","geolocation","getCurrentPosition","position","push","coords","latitude","longitude","getLocation","checkUseer","id","getPointer","then","obj","set","save","startLocation","intervel","window","setInterval","clearInterval","stopLocation"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n  <div>\n    <p>{{!formState.start ? \"Sharing Location........\" : \"Stopped Location.................\"}}</p>\n    <button v-if=\"formState.stop\" @click=\"stopLocation()\">STOP</button>\n    <button v-if=\"formState.start\" @click=\"startLocation()\">START</button>\n\n    <userView />\n    <!-- <button @click=\"getLocation()\">Track Location</button> -->\n    \n    <GoogleMap\n      v-if=\"formState.loader\"\n      api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"formState.center\"\n      :zoom=\"25\"\n    >\n      <Polyline :options=\"line.flightPath\" />\n      <Marker :options=\"{ position: formState.center }\" />\n    </GoogleMap>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\n\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\";\n// import Parse from \"parse\";\n\nexport default defineComponent({\n  components: { GoogleMap, Marker, Polyline, userView },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center: { lat: 40.689247, lng: -74.044502 },\n      loader: false,\n      data: [],\n      getData:[],\n      flag:false,\n      sharing:false,\n      start:true,\n      stop:false\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n  \n    onMounted(async () => {\n      const currentUser = Parse.User.current();\n      // const currentUser = Parse.User.current();\n      // await User.getPointer(currentUser.id).then((obj)=>{\n      //   var ldata =  currentUser.get('userLocation')\n      // })\n\n      if(currentUser){\n        var ldata =  currentUser.get('userLocation')\n         console.log(\"ldata\",ldata)\n         formState.data=currentUser.get('userLocation')\n         console.log(formState.data[0])\n      }\n\n      // getLocation();\n\n\n     \n      // window.setInterval(() => {\n      //   navigator.geolocation.getCurrentPosition(() => {});\n      //   getLocation();\n      // }, 9000); \n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      const checkUseer = Parse.User.current();\n      formState.loader = false;\n      if(checkUseer){\n        if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          console.log(formState.data)\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          formState.getData.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n\n          // console.log(formState.center.lat)\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          \n          const currentUser = Parse.User.current();\n          console.log(\"curremt user\",currentUser.get(\"username\"),currentUser.id)\n          await User.getPointer(currentUser.id).then(obj => {\n            currentUser.set({\n              \"userLocation\":formState.data\n              \n            })\n            currentUser.save().then(()=>{\n              console.log(\"saving............................\")\n            })\n            console.log(obj);\n          });\n         \n          formState.loader = true;\n        });\n      }\n      }\n \n    };\n    // setInterval(updateLocation, 5000);\n\n    const startLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    var intervel =   window.setInterval(() => {\n      formState.start=false\n      formState.stop=true\n      \n        if(formState.flag){\n\n          window.clearInterval(intervel)\n        }\n        else{\n        getLocation();\n        }\n        // navigator.geolocation.getCurrentPosition(() => {});\n      }, 5000); \n      // clearInterval(startLocation());\n    };\n    const stopLocation = ()=>{\n      console.log(\"stop\")\n      // clearInterval(startLocation());\n      formState.flag=true\n\n      formState.start=true\n      formState.stop=false\n      // clearInterval(myInterval);\n\n    }\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      startLocation,\n      getLocation,\n      line,\n      stopLocation\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}