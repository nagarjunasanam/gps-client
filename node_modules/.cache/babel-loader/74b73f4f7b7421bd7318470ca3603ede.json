{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\"; // import Parse from \"parse\";\n\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    Polyline,\n    userView\n  },\n\n  setup() {\n    const center = {\n      lat: 40.689247,\n      lng: -74.044502\n    };\n    const formState = reactive({\n      image: \"\",\n      center: {\n        lat: 40.689247,\n        lng: -74.044502\n      },\n      loader: false,\n      data: [],\n      getData: []\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(async () => {\n      const currentUser = Parse.User.current();\n      await User.getPointer(currentUser.id).then(() => {\n        formState.getData = currentUser.get('userLocation');\n      });\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 5000); //number of milliseconds\n\n      getLocation();\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      formState.loader = false;\n\n      if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          formState.getData.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }); // console.log(formState.center.lat)\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          const currentUser = Parse.User.current();\n          console.log(\"curremt user\", currentUser.get(\"username\"), currentUser.id);\n          await User.getPointer(currentUser.id).then(obj => {\n            currentUser.set({\n              \"userLocation\": formState.getData\n            });\n            currentUser.save().then(() => {\n              console.log(\"saving............................\");\n            });\n            console.log(obj);\n          });\n          formState.loader = true;\n        });\n      }\n    }; // setInterval(updateLocation, 5000);\n\n\n    const trackLocation = () => {// console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      trackLocation,\n      getLocation,\n      line\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","reactive","onMounted","GoogleMap","Marker","Polyline","Parse","User","userView","components","setup","center","lat","lng","formState","image","loader","data","getData","line","flightPath","path","geodesic","strokeColor","strokeOpacity","strokeWeight","currentUser","current","getPointer","id","then","get","window","setInterval","navigator","geolocation","getCurrentPosition","getLocation","updateLocation","position","push","coords","latitude","longitude","console","log","obj","set","save","trackLocation"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n  <div>\n    <p>{{formState.getData}}</p>\n    <userView />\n    <!-- <button @click=\"getLocation()\">Track Location</button> -->\n    \n    <GoogleMap\n      v-if=\"formState.loader\"\n      api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"formState.center\"\n      :zoom=\"25\"\n    >\n      <Polyline :options=\"line.flightPath\" />\n      <Marker :options=\"{ position: formState.center }\" />\n    </GoogleMap>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\n\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\";\n// import Parse from \"parse\";\n\nexport default defineComponent({\n  components: { GoogleMap, Marker, Polyline, userView },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center: { lat: 40.689247, lng: -74.044502 },\n      loader: false,\n      data: [],\n      getData:[]\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(async () => {\n      const currentUser = Parse.User.current();\n\n      await User.getPointer(currentUser.id).then(()=>{\n        formState.getData = currentUser.get('userLocation')\n      })\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 5000); //number of milliseconds\n      getLocation();\n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      formState.loader = false;\n      if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          formState.getData.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n\n          // console.log(formState.center.lat)\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          \n          const currentUser = Parse.User.current();\n          console.log(\"curremt user\",currentUser.get(\"username\"),currentUser.id)\n          await User.getPointer(currentUser.id).then(obj => {\n            currentUser.set({\n              \"userLocation\":formState.getData\n              \n            })\n            currentUser.save().then(()=>{\n              console.log(\"saving............................\")\n            })\n            console.log(obj);\n          });\n         \n          formState.loader = true;\n        });\n      }\n    };\n    // setInterval(updateLocation, 5000);\n\n    const trackLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      trackLocation,\n      getLocation,\n      line\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}