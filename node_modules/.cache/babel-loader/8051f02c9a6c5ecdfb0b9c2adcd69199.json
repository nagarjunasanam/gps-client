{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, \"AIzaSyBItZDFpGCcIYt2HxahOQ4XnY8tn2dDn40\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"hello\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", null, \"nn\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = [_hoisted_1, _hoisted_2, _hoisted_3, _hoisted_4];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, _hoisted_5);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAA8C,GAA9C,EAA8C,IAA9C,EAAG,yCAAH,EAA0C;AAAA;AAA1C;;gCACAA,oBAAY,GAAZ,EAAY,IAAZ,EAAG,OAAH,EAAQ;AAAA;AAAR;;gCACAA,oBAAoB,KAApB,EAAoB;EAAfC,EAAE,EAAC;AAAY,CAApB,EAAa,IAAb,EAAa;AAAA;AAAb;;gCAEAD,oBAAS,GAAT,EAAS,IAAT,EAAG,IAAH,EAAK;AAAA;AAAL;;oBAJAE,YACAC,YACAC,YAEAC;;uBALFC,oBAOM,KAPN,EAOM,IAPN,EAOMC,UAPN","names":["_createElementVNode","id","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_createElementBlock","_hoisted_5"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <p>AIzaSyBItZDFpGCcIYt2HxahOQ4XnY8tn2dDn40</p>\n    <p>hello</p>\n    <div id=\"map\"></div>\n\n    <p>nn</p>\n   \n  </div>\n</template>\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\n// import {Loader} from 'google-maps';\nimport { Loader } from '@googlemaps/js-api-loader';\n\n\n\n\n// import Parse from 'parse'\n\nexport default defineComponent({\n  component:{\n   \n\n    \n  },\n  setup() {\n    const formState = reactive({\n      image: \"\",\n      center:null\n    });\n    onMounted(async () => {\n// or const {Loader} = require('google-maps'); without typescript\n \n// const options: LoaderOptions = {/* todo */};\n\n// const loader = new Loader('AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4', {});\nconst loader = new Loader({\n  apiKey: \"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\",\n  version: \"weekly\",\n  libraries: [\"places\"]\n});\n \nconst google = await loader.load();\n\n\n      if (navigator.geolocation) {\n        console.log(\"hello\");\n        navigator.geolocation.watchPosition(position => {\n          console.log(position);\n          var point = new google.maps.LatLng(\n            position.coords.latitude,\n            position.coords.longitude\n          );\n          console.log(point)\n          var map = new google.maps.Map(document.getElementById('map'), {\n             zoom: 15,\n            center: point,\n            mapTypeId: google.maps.MapTypeId.ROADMAP\n          });\n          // console.log(map)\n          new google.maps.Marker({\n            position: point,\n            map: map\n          });\n        });\n      }\n    });\n\n    return {\n      formState\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}