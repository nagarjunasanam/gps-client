{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\"; // import Parse from \"parse\";\n\nexport default defineComponent({\n  components: {\n    GoogleMap,\n    Marker,\n    Polyline,\n    userView\n  },\n\n  setup() {\n    const center = {\n      lat: 40.689247,\n      lng: -74.044502\n    };\n    const formState = reactive({\n      image: \"\",\n      center: {\n        lat: 40.689247,\n        lng: -74.044502\n      },\n      loader: false,\n      data: [],\n      getData: []\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n    onMounted(async () => {\n      // const currentUser = Parse.User.current();\n      getLocation(); // window.setInterval(() => {\n      //   navigator.geolocation.getCurrentPosition(() => {});\n      //   getLocation();\n      // }, 9000); \n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      const checkUseer = Parse.User.current();\n      formState.loader = false;\n\n      if (checkUseer) {\n        if (navigator.geolocation) {\n          // console.log(\"h\")\n          await navigator.geolocation.getCurrentPosition(async position => {\n            console.log(position.coords.latitude);\n            console.log(position.coords.longitude);\n            formState.data.push({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            });\n            formState.getData.push({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }); // console.log(formState.center.lat)\n\n            formState.center.lat = position.coords.latitude;\n            formState.center.lng = position.coords.longitude;\n            const currentUser = Parse.User.current();\n            console.log(\"curremt user\", currentUser.get(\"username\"), currentUser.id);\n            await User.getPointer(currentUser.id).then(obj => {\n              currentUser.set({\n                \"userLocation\": formState.data\n              });\n              currentUser.save().then(() => {\n                console.log(\"saving............................\");\n              });\n              console.log(obj);\n            });\n            formState.loader = true;\n          });\n        }\n      }\n    }; // setInterval(updateLocation, 5000);\n\n\n    const startLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 9000);\n      clearInterval(startLocation());\n    };\n\n    const stopLocation = () => {\n      console.log(\"stop\");\n      clearInterval(startLocation()); // clearInterval(myInterval);\n    };\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      startLocation,\n      getLocation,\n      line,\n      stopLocation\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","reactive","onMounted","GoogleMap","Marker","Polyline","Parse","User","userView","components","setup","center","lat","lng","formState","image","loader","data","getData","line","flightPath","path","geodesic","strokeColor","strokeOpacity","strokeWeight","getLocation","updateLocation","navigator","geolocation","getCurrentPosition","position","push","coords","latitude","longitude","console","log","checkUseer","current","currentUser","get","id","getPointer","then","obj","set","save","startLocation","window","setInterval","clearInterval","stopLocation"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\HomeView.vue"],"sourcesContent":["\n\n<template>\n  <div>\n    <!-- <p>{{formState.getData}}</p> -->\n    <button @click=\"stopLocation()\">STOP</button>\n    <button @click=\"startLocation()\">START</button>\n\n    <userView />\n    <!-- <button @click=\"getLocation()\">Track Location</button> -->\n    \n    <GoogleMap\n      v-if=\"formState.loader\"\n      api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"formState.center\"\n      :zoom=\"25\"\n    >\n      <Polyline :options=\"line.flightPath\" />\n      <Marker :options=\"{ position: formState.center }\" />\n    </GoogleMap>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\n\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport userView from \"../components/UserView.vue\";\n// import Parse from \"parse\";\n\nexport default defineComponent({\n  components: { GoogleMap, Marker, Polyline, userView },\n  setup() {\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center: { lat: 40.689247, lng: -74.044502 },\n      loader: false,\n      data: [],\n      getData:[]\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n  \n    onMounted(async () => {\n      // const currentUser = Parse.User.current();\n      getLocation();\n\n\n     \n      // window.setInterval(() => {\n      //   navigator.geolocation.getCurrentPosition(() => {});\n      //   getLocation();\n      // }, 9000); \n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      const checkUseer = Parse.User.current();\n      formState.loader = false;\n      if(checkUseer){\n        if (navigator.geolocation) {\n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          formState.getData.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n\n          // console.log(formState.center.lat)\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n          \n          const currentUser = Parse.User.current();\n          console.log(\"curremt user\",currentUser.get(\"username\"),currentUser.id)\n          await User.getPointer(currentUser.id).then(obj => {\n            currentUser.set({\n              \"userLocation\":formState.data\n              \n            })\n            currentUser.save().then(()=>{\n              console.log(\"saving............................\")\n            })\n            console.log(obj);\n          });\n         \n          formState.loader = true;\n        });\n      }\n      }\n \n    };\n    // setInterval(updateLocation, 5000);\n\n    const startLocation = () => {\n      // console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n      window.setInterval(() => {\n        navigator.geolocation.getCurrentPosition(() => {});\n        getLocation();\n      }, 9000); \n      clearInterval(startLocation());\n    };\n    const stopLocation = ()=>{\n      console.log(\"stop\")\n      clearInterval(startLocation());\n      // clearInterval(myInterval);\n\n    }\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      startLocation,\n      getLocation,\n      line,\n      stopLocation\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}