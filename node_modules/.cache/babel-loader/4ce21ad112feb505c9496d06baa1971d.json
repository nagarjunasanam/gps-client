{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createBlock as _createBlock, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SignOut = _resolveComponent(\"SignOut\");\n\n  const _component_Polyline = _resolveComponent(\"Polyline\");\n\n  const _component_Marker = _resolveComponent(\"Marker\");\n\n  const _component_GoogleMap = _resolveComponent(\"GoogleMap\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_ctx.formState.user ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_SignOut)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <p>{{formState.user && !formState.sharing ? \\\"Sharing Location........\\\" : \\\"Stopped Location.................\\\"}}</p> \"), _createElementVNode(\"h1\", null, _toDisplayString(_ctx.formState.user ? \"\" : \"Sign to share Location\"), 1\n  /* TEXT */\n  ), _ctx.formState.user ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_ctx.formState.stop ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.stopLocation())\n  }, \"STOP\")) : _createCommentVNode(\"v-if\", true), _ctx.formState.start ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.startLocation())\n  }, \"START\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <userView /> \"), _createCommentVNode(\" <button @click=\\\"getLocation()\\\">Track Location</button> \")])) : _createCommentVNode(\"v-if\", true), _ctx.formState.showMap ? (_openBlock(), _createBlock(_component_GoogleMap, {\n    key: 2,\n    \"api-key\": \"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\",\n    style: {\n      \"width\": \"100%\",\n      \"height\": \"500px\"\n    },\n    center: _ctx.formState.center,\n    zoom: 25\n  }, {\n    default: _withCtx(() => [_ctx.formState.loader ? (_openBlock(), _createBlock(_component_Polyline, {\n      key: 0,\n      options: _ctx.line.flightPath\n    }, null, 8\n    /* PROPS */\n    , [\"options\"])) : _createCommentVNode(\"v-if\", true), _ctx.formState.loader ? (_openBlock(), _createBlock(_component_Marker, {\n      key: 1,\n      options: {\n        position: _ctx.formState.center\n      }\n    }, null, 8\n    /* PROPS */\n    , [\"options\"])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"center\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;uBAGEA,oBAyBM,KAzBN,EAyBM,IAzBN,EAyBM,CAxBOC,eAAUC,sBAArBF,oBAEM,KAFN,EAEMG,UAFN,EAEM,CADJC,aAAWC,kBAAX,CACI,CAFN,sCAwBI,EApBJC,+IAoBI,EAnBJC,oBAAyD,IAAzD,EAAyD,IAAzD,EAAyDC,iBAAnDP,eAAUC,IAAV,GAAc,EAAd,GAAc,wBAAqC,CAAzD,EAAoB;EAAA;EAApB,CAmBI,EAlBOD,eAAUC,sBAArBF,oBAMM,KANN,EAMMS,UANN,EAMM,CALUR,eAAUS,sBAAxBV,oBAAqE,QAArE,EAAqE;UAAA;IAApCW,OAAK,sCAAEV,mBAAF;EAA+B,CAArE,EAAwD,MAAxD,sCAKI,EAJQA,eAAUW,uBAAxBZ,oBAAwE,QAAxE,EAAwE;UAAA;IAAtCW,OAAK,sCAAEV,oBAAF;EAAiC,CAAxE,EAA0D,OAA1D,sCAIM,EAFNK,qCAEM,EADNA,iFACM,CANN,sCAkBI,EATGL,eAAUY,yBADjBC,aASYC,oBATZ,EASY;UAAA;IAPV,WAAQ,yCAOE;IANVC,KAAkC,EAAlC;MAAA;MAAA;IAAA,CAMU;IALTC,MAAM,EAAEhB,eAAUgB,MAKT;IAJTC,IAAI,EAAE;EAIG,CATZ;sBAOE,MAA+D,CAA/CjB,eAAUkB,wBAA1BL,aAA+DM,mBAA/D,EAA+D;YAAA;MAA5BC,OAAO,EAAEpB,UAAKqB;IAAc,CAA/D;;IAAA,mDAA+D,EACjDrB,eAAUkB,wBAAxBL,aAA4ES,iBAA5E,EAA4E;YAAA;MAA3CF,OAAO;QAAAG,UAAcvB,eAAUgB;MAAxB;IAAoC,CAA5E;;IAAA,mDAD+D;;;;GAPjE;;EAAA,kDAUI,CAzBN","names":["_createElementBlock","_ctx","user","_hoisted_1","_createVNode","_component_SignOut","_createCommentVNode","_createElementVNode","_toDisplayString","_hoisted_2","stop","onClick","start","showMap","_createBlock","_component_GoogleMap","style","center","zoom","loader","_component_Polyline","options","flightPath","_component_Marker","position"],"sourceRoot":"","sources":["C:\\Users\\user\\Downloads\\parse\\src\\components\\LocationView.vue"],"sourcesContent":["\n\n<template>\n  <div>\n    <div v-if=\"formState.user\" >\n      <SignOut />\n    </div>\n    \n    <!-- <p>{{formState.user && !formState.sharing ? \"Sharing Location........\" : \"Stopped Location.................\"}}</p> -->\n    <h1>{{formState.user ? \"\":\"Sign to share Location\"}}</h1>\n    <div v-if=\"formState.user\">\n      <button v-if=\"formState.stop \"  @click=\"stopLocation()\">STOP</button>\n    <button v-if=\"formState.start  \" @click=\"startLocation()\">START</button>\n\n    <!-- <userView /> -->\n    <!-- <button @click=\"getLocation()\">Track Location</button> -->\n    </div>\n    \n    <GoogleMap  \n     v-if=\"formState.showMap\"\n      api-key=\"AIzaSyABPywZVGnAsgP8llgiBFnx8sAvUUiRyv4\"\n      style=\"width: 100%; height: 500px\"\n      :center=\"formState.center\"\n      :zoom=\"25\"\n    >\n      <Polyline v-if=\"formState.loader\" :options=\"line.flightPath\" />\n      <Marker v-if=\"formState.loader\" :options=\"{ position: formState.center }\" />\n    </GoogleMap>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, onMounted } from \"vue\";\nimport { GoogleMap, Marker, Polyline } from \"vue3-google-map\";\n\nimport Parse from \"parse\";\nimport User from \"../server/user\";\nimport SignOut from \"../components/SignOut.vue\"\n// import userView from \"./UserView.vue\";\n// import Parse from \"parse\";\n\nexport default defineComponent({\n  components: { GoogleMap, Marker, Polyline,SignOut },\n  setup() {\n    const currentUser = Parse.User.current();\n\n    const center = { lat: 40.689247, lng: -74.044502 };\n    const formState = reactive({\n      image: \"\",\n      center: { lat: 40.689247, lng: -74.044502 },\n      loader: false,\n      data: [],\n      getData:[],\n      flag:false,\n      sharing:false,\n      start:null,\n      stop:null,\n      user:null,\n      showMap:false\n    });\n    const line = reactive({\n      flightPath: {\n        path: formState.data,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2\n      }\n    });\n  \n    onMounted(async () => {\n      const currentUser = Parse.User.current();\n      if(currentUser){\n        formState.start=true\n        formState.stop=false,\n        formState.user=true\n      }\n      // const currentUser = Parse.User.current();\n      // await User.getPointer(currentUser.id).then((obj)=>{\n      //   var ldata =  currentUser.get('userLocation')\n      // })\n\n      // if(currentUser){\n      //   var ldata =  currentUser.get('userLocation')\n      //    console.log(\"ldata\",ldata)\n      //    formState.data=currentUser.get('userLocation')\n      //    console.log(formState.data[0])\n      // }\n\n      // getLocation();\n\n\n     \n      // window.setInterval(() => {\n      //   navigator.geolocation.getCurrentPosition(() => {});\n      //   getLocation();\n      // }, 9000); \n    });\n\n    const updateLocation = async () => {\n      if (navigator.geolocation) {\n        await navigator.geolocation.getCurrentPosition(position => {\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n        });\n      }\n    };\n\n    const getLocation = async () => {\n      const checkUseer = Parse.User.current();\n      formState.loader = false;\n      if(checkUseer){\n        if (navigator.geolocation) {\n          \n        // console.log(\"h\")\n        await navigator.geolocation.getCurrentPosition(async position => {\n          console.log(position.coords.latitude);\n          console.log(position.coords.longitude);\n          console.log(formState.data)\n     \n          let myTarget = JSON.parse(JSON.stringify(formState.data))\n          console.log(myTarget)\n          formState.data.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          formState.getData.push({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n\n          // console.log(formState.center.lat)\n          formState.center.lat = position.coords.latitude;\n          formState.center.lng = position.coords.longitude;\n               //show map\n          formState.showMap=true\n          \n          // const currentUser = Parse.User.current();\n          console.log(\"curremt user\",currentUser.get(\"username\"),currentUser.id)\n          await User.getPointer(currentUser.id).then(obj => {\n            currentUser.set({\n              \"userLocation\":formState.data\n              \n            })\n            currentUser.save().then(()=>{\n              console.log(\"saving............................\")\n            })\n            console.log(obj);\n          });\n         \n          formState.loader = true;\n        });\n      }\n      }\n \n    };\n    // setInterval(updateLocation, 5000);\n\n    const startLocation = async() => {\n      \n      formState.flag=false\n      console.log(\"hi\")\n      // setTimeout(updateLocation, 1000);\n      currentUser.set({\n        'state':true\n      })\n\n      await currentUser.save()\n    var intervel =   window.setInterval(() => {\n      \n      console.log(\".......\")\n      \n        if(formState.flag){\n      console.log(\",,,,,,,,,,,,,,\")\n      formState.start=true\n      formState.stop=false\n          \n\n          window.clearInterval(intervel)\n        }\n        else{\n      console.log(\"!!!!!!!!!!!!!!!!\")\n      formState.start=false\n      formState.stop=true\n\n        getLocation();\n        }\n        // navigator.geolocation.getCurrentPosition(() => {});\n      }, 3000); \n      // clearInterval(startLocation());\n    };\n    const stopLocation = async()=>{\n      // formState.stop=false\n      currentUser.set({\n        'state':false\n      })\n\n      await currentUser.save()\n\n      console.log(\"stop\")\n\n      // clearInterval(startLocation());\n\n    \n      formState.flag=true\n\n      // formState.start=true\n     \n      // clearInterval(myInterval);\n\n    }\n\n    return {\n      center,\n      formState,\n      updateLocation,\n      startLocation,\n      getLocation,\n      line,\n      stopLocation\n    };\n  }\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}